/* -- PREAMBLE  ------------------------------------------ */
%{
#include <iostream>
#include <iomanip>
#include "puckparser.tab.h"      // file generated by Bison
using namespace std;

int line_num = 1;      // to keep line numbers

// Function prototype
void writeToken(const char* toktype);

%}

     /* -- OPTIONS and DEFINITIONS ----------------------- */
%option noyywrap

WHITE      [ \t]
DIGIT      [0-9]
ALPHA      [a-zA-Z]
ALPHANUM   [a-zA-Z0-9]

%%   /* -- REGULAR EXPRESSIONS ---------------------------- */

{WHITE}    ;                /* eat white space */
\n         { line_num++; }  /* count line numbers */

 /* Keywork tokens */
";"        { writeToken("K_SC"); return K_SC; }
"("        { writeToken("K_LPAREN"); return K_LPAREN; }
")"        { writeToken("K_RPAREN"); return K_RPAREN; }
"WRITE"    { writeToken("K_WRITE"); return K_WRITE; }
"IF"       { writeToken("K_IF"); return K_IF; }
"THEN"     { writeToken("K_THEN"); return K_THEN; }
"ELSE"     { writeToken("K_ELSE"); return K_ELSE; }
"WHILE"    { writeToken("K_WHILE"); return K_WHILE; }
"DO"       { writeToken("K_DO"); return K_DO; }
"END"      { writeToken("K_END"); return K_END; }

 /* Operator tokens */
":="               { writeToken("OP_ASSIGN"); return OP_ASSIGN; }
"~"                { writeToken("OP_NEG"); return OP_NEG; }
"<"|">"|"="|"#"    { writeToken("OP_RELATION"); return OP_RELATION; }
"+"|"-"|"&"|"OR"   { writeToken("OP_ADD"); return OP_ADD; }
"*"|"/"|"AND"      { writeToken("OP_MULT"); return OP_MULT; }

  /* Complex Tokens */
{ALPHA}{ALPHANUM}*         { writeToken("T_IDENT"); return T_IDENT; }
[+-]?{DIGIT}+              { writeToken("T_INTEGER"); return T_INTEGER; }
[+-]?{DIGIT}+\.{DIGIT}+    { writeToken("T_DECIMAL"); return T_DECIMAL; }
\"[^ \n\t\"]*\"            { writeToken("T_STRING"); return T_STRING; }


%%   /* -- EPILOGUE  -------------------------------------- */

// Purpose: prints that a token was found
void writeToken(const char* toktype)
{
  cout << "TOKEN: ";
  cout << left << setw(14) << toktype;
  cout << "LEXEME: " << yytext << endl;
}
